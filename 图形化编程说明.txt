注;我是因为看了黑客与画家后得出一些浅显的思考才产生如此想法.

为什么要用C语言呢?
1,首先,与C有关的资源最多最全面.不管是教程还是代码还是工具.
2,基于C的底层代码(比如驱动),软件最多(比如API),最广泛.
3,几乎所有能在硬件上运行的操作系统都是用C写的.内核代码清一色用C.也就是说,可以用C语言再创造新的操作系统类型.新的代码体系.(相对于目前的win,linux,unix)
4,几乎所有高级语言的编译器或解释器都是用C或C++写的.也就是,高级语言最后还得翻译为C语言再翻译为低级语言执行.
5,C语言是仅次于汇编的高速高效率语言.速度快,意味着生产转化速度,商品转换效率会达到新的高度.
6,可以更方便地学习C语言,用C教学,更容易进入程序设计大门!
7,发展到现在,几乎所有硬件处理设备(包括CPU,GPU,DSP,MCU等等微处理器微控制器还有各类存储器)都为C语言进行了优化和针对性的设计.

首先,我必须要表达的是我对生产力工具非常感兴趣.不管是硬件界还是软件界.亦或是其它产业大类.人类自从学会了使用火(能量)与骨头、木棒、石块(工具,物质组成的工具)以来,生产力处于一种指数级的发展,生产力的发展相反地又推动了人类加速进步演化.
我认为翻译、转换、变化存在于自然界各个角落,大至宏观世界(宇宙),小至微观世界(宇宙),每一个层级,每一个纬度与其他层级其他纬度的联系,、连接就是翻译、转换、变化.从普朗克常数描述的量子世界到宇宙微波背景辐射,翻译、转换、变化无处不在,无限存在.
再来看看语言是什么,语言经过抽象分为两大部分,一种是内部,一种是外部,内部是意识意念内语言,外部是语音,语言,字符.因为人与人之间不能通过心灵沟通来交流,所以我们的大脑"创造"了多级翻译(与其说是创造,不如说是自然功能,人类并没有创造什么,所有一切不过是发现了早就已经有并存在的一切),从意识到字符的过程经过了很多步骤,这些步骤就是翻译转换变化,如果将这些过程抽象,我们可以将之视作是函数的功能过程.每个子功能由子函数完成,子功能在不可见世界或微观世界组成连接拼装在一起就形成我们人类常数常规世界所见到的"一个"功能.这"一个"功能就是众多子函数的集合,亦可以将此集合与其他集合封装为新的函数,既;大的完全的功能模块.

我设想的是在集成开发环境(ＩＤＥ)的基础上翻译Ｃ语言，它不像易语言一样在代码层次上翻译带来的各种多此一举，又不像用Ｃ语言开发还得在脑内翻译一次（也就是人肉编译器），我只是将即时战略游戏和即时策略类游戏的优点抽象出来（操控的精髓），把它们的优点嫁接到对Ｃ语言代码的翻译上，让初学者或者程序员就像玩游戏一样编写出用Ｃ语言产生的源代码．使非英语母语的所有其他国家或种族的人也能轻而易举地驾驭程序创造！释放每个非英语母语人类个体的创造潜能.
从某种意义上来说,我的想法属于应用乔布斯的思维模式.这种IDE就像是对操控界面的翻译,就像图形化的游戏和各种图形界面的程序一样.可2D.也可3D.我们都知道,图形界面可以做到多种语言显示.所以,不同国家、种族、地区方言都可以用自己专门的语言显示来描述具体的功能模块.这是一种绕过直接翻译的方法.因为计算机软硬件从本质上来说就是多级翻译,从接近自然语言逐级翻译到晶体管的二进制.
为什么要图形化呢?
因为图形最容易被人接受,最能形成逻辑思维,立体思维,最容易被大脑理解,同样的大脑经过思索反馈出来的图形化思维模型也容易在IDE中表现出来.

理论上来说，使用IDE翻译的方法只需要点击、移动、拖动(加上键盘快捷键)等基本操作就可以完成代码的编写.也就是说,台式与笔记本只需要鼠标或触摸板,平板或手机只需要手指触控屏幕.对于变量和数字等字符的输入①可以用键盘或屏幕虚拟键盘,②可以用语音输入.
具体流程是:打开IDE→使用IDE组装拼装函数模块(代码模块)[教程书中描述C语言程序基本是由函数块构成]→生成源代码(每个模块都有与之对应的代码段,所以可以方便生成)→编译源代码(可以使用流行的编译器)→具体可执行的程序(可以编译为多种平台的应用).
内核:C,效率高,并且足够接近硬件底层.
图形界面:Vulkan,高效率,多平台,开源自由.
量变引发质变.当此思维设计模型发展到一定程度便可以实现函数式编程和面向对象编程,甚至是面向自然语言编程!正因为此种思维设计方式不是翻译具体的某一门程序语言,因此此种IDE可以容纳多种程序设计语言,除了C,市面上所有已知的程序语言均可用此种思维设计模型创造的IDE表达.

#include <stdio.h>
#include <vulkan/vulkan.h>
